const SteamID = require("steamid");

module.exports = class Helper {
	static decodeUids(input) {
		let bytes = [];

		let byte = input.readUint8();
		while (byte !== 0x00) {
			bytes.push(byte);
			byte = input.readUint8();
		}
		bytes.push(0);

		let b = Buffer.from(bytes);
		let results = [];
		let position = 0;

		while (position < b.length) {
			let lookahead = 0;
			let token = b.readInt8(position);
			let backup = token;
			let v5 = 0;
			let v7 = 0;
			let v9 = 0;

			do {
				backup = token;
				lookahead += 1;
				v9 = (token & 0x7F) << v7;
				v7 += 7;
				v5 |= v9;

				if (token === 0 || backup >= 0) {
					break;
				}

				token = b.readInt8(position + lookahead);
			} while (v7 < 35);

			if (backup < 0) {
				break;
			}

			position += lookahead;

			if (v5 === 0) {
				continue;
			}

			results.push(SteamID.fromIndividualAccountID(v5));
		}

		return results;
	}

	static encodeUids(steamids) {
		let outputBuffer = [];

		for (let id of steamids.map(s => s.accountid)) {
			while (id > 0x7F) {
				outputBuffer.push((id | 0x80) & 0xFF);
				id >>= 7;
			}

			outputBuffer.push(id);
		}

		outputBuffer.push(0x00);

		return Buffer.from(outputBuffer);
	}

	static IPStrToInt(ipString) {
		// Copied from: DoctorMcKay/node-stdlib
		// https://github.com/DoctorMcKay/node-stdlib/blob/3a65f4116116fb8a0a82239a9cc0db35c44558d9/components/ipv4.js
		let buf = Buffer.alloc(4);
		let octets = ipString.split(".");

		for (let i = 0; i < 4; i++) {
			buf[i] = parseInt(octets[i], 10);
		}

		return buf.readUInt32BE(0);
	}
}
